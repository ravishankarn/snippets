import crypto from 'crypto';

const SECRET = process.env.SIGNING_SECRET || 'super-secret-here';

// --- Token Generation ---
function generateHmacToken(
  documentId: string,
  method: 'presigned-url' | 'base64',
  ttlSeconds: number
): string {
  const expiry = Math.floor(Date.now() / 1000) + ttlSeconds;
  const base = `${documentId}|${method}|${expiry}`;
  const hmac = crypto.createHmac('sha256', SECRET).update(base).digest('hex');
  const token = Buffer.from(`${base}|${hmac}`).toString('base64url');
  return token;
}

// --- Token Verification ---
function verifyHmacToken(token: string): { docId: string; method: string } {
  const decoded = Buffer.from(token, 'base64url').toString();
  const [docId, method, expiryStr, providedHmac] = decoded.split('|');
  const expiry = parseInt(expiryStr, 10);

  if (Date.now() / 1000 > expiry) {
    throw new Error('Token expired');
  }

  const base = `${docId}|${method}|${expiry}`;
  const expectedHmac = crypto.createHmac('sha256', SECRET).update(base).digest('hex');

  if (expectedHmac !== providedHmac) {
    throw new Error('Invalid token signature');
  }

  return { docId, method };
}



#####

const token = generateHmacToken('abc123', 'presigned-url', 300); // TTL: 5 minutes
const callbackUrl = `https://yourapi.com/documents/access/${token}`;

console.log("Callback URL:", callbackUrl);
// e.g., https://yourapi.com/documents/access/ZXhhbXBsZURvY0lEfHByZXNpZ25lZC11cmx8MTcxODA0MzYzMHwxMjM0YWJjZGVm...



###


import express from 'express';
const app = express();

app.get('/documents/access/:token', (req, res) => {
  try {
    const { docId, method } = verifyHmacToken(req.params.token);

    if (method === 'presigned-url') {
      // Generate and return S3 pre-signed URL
      res.json({ url: `https://s3.../${docId}?signed-url` });
    } else if (method === 'base64') {
      // Fetch, encode, and return base64 document
      const base64Data = '...'; // load and encode docId file
      res.json({ base64: base64Data });
    } else {
      res.status(400).send('Invalid method');
    }
  } catch (err) {
    res.status(401).send('Invalid or expired token');
  }
});